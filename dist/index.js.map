{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-1.852\n*\n* @example\n* var y = logpdf( 1.0, 0.0, 1.0 );\n* // returns ~-0.919\n*\n* @example\n* var y = logpdf( 1.0, 3.0, 1.0 );\n* // returns ~-5.419\n*\n* @example\n* var y = logpdf( -1.0, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = logpdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn NINF;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = -0.5 * ln( 2.0 * s2 * PI );\n\tB = -1.0 / ( 2.0 * s2 );\n\treturn A - ln( x ) + ( B * pow( ln(x) - mu, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = logpdf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} logPDF\n*\n* @example\n* var logpdf = factory( 4.0, 2.0 );\n* var y = logpdf( 10.0 );\n* // returns ~-4.275\n*\n* y = logpdf( 2.0 );\n* // returns ~-3.672\n*/\nfunction factory( mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = -0.5 * ln( 2.0 * s2 * PI );\n\tB = -1.0 / ( 2.0 * s2 );\n\treturn logpdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logPDF\n\t*\n\t* @example\n\t* var y = logpdf( 2.5 );\n\t* // returns <number>\n\t*/\n\tfunction logpdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\treturn A - ln( x ) + ( B * pow( ln(x) - mu, 2.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the probability density function (PDF) for a lognormal distribution.\n*\n* @module @stdlib/stats-base-dists-lognormal-logpdf\n*\n* @example\n* var logpdf = require( '@stdlib/stats-base-dists-lognormal-logpdf' );\n*\n* var y = logpdf( 2.0, 0.0, 1.0 );\n* // returns ~-1.852\n*\n* y = logpdf( 1.0, 0.0, 1.0 );\n* // returns ~-0.919\n*\n* y = logpdf( 1.0, 3.0, 1.0 );\n* // returns ~-5.419\n*\n* var mylogpdf = logpdf.factory( 4.0, 2.0 );\n* y = mylogpdf( 10.0 );\n* // returns ~-4.269\n*\n* y = mylogpdf( 2.0 );\n* // returns ~-3.689\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAK,QAAS,8BAA+B,EAC7CC,EAAO,QAAS,gCAAiC,EACjDC,EAAK,QAAS,8BAA+B,EA8CjD,SAASC,EAAQC,EAAGC,EAAIC,EAAQ,CAC/B,IAAIC,EACAC,EACAC,EACJ,OACCX,EAAOM,CAAE,GACTN,EAAOO,CAAG,GACVP,EAAOQ,CAAM,GACbA,GAAS,EAEF,IAEHF,GAAK,EACFH,GAERM,EAAKR,EAAKO,EAAO,CAAI,EACrBE,EAAI,IAAOR,EAAI,EAAMO,EAAKL,CAAG,EAC7BO,EAAI,IAAS,EAAMF,GACZC,EAAIR,EAAII,CAAE,EAAMK,EAAIV,EAAKC,EAAGI,CAAC,EAAIC,EAAI,CAAI,EACjD,CAKAR,EAAO,QAAUM,IChGjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAQ,QAAS,iCAAkC,EACnDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAK,QAAS,8BAA+B,EAC7CC,EAAO,QAAS,gCAAiC,EACjDC,EAAK,QAAS,8BAA+B,EAoBjD,SAASC,EAASC,EAAIC,EAAQ,CAC7B,IAAIC,EACAC,EACAC,EACJ,GACCV,EAAOM,CAAG,GACVN,EAAOO,CAAM,GACbA,GAAS,EAET,OAAOR,EAAkB,GAAI,EAE9B,OAAAS,EAAKP,EAAKM,EAAO,CAAI,EACrBE,EAAI,IAAOP,EAAI,EAAMM,EAAKJ,CAAG,EAC7BM,EAAI,IAAS,EAAMF,GACZG,EAaP,SAASA,EAAQC,EAAI,CACpB,OAAKZ,EAAOY,CAAE,EACN,IAEHA,GAAK,EACFT,EAEDM,EAAIP,EAAIU,CAAE,EAAMF,EAAIT,EAAKC,EAAGU,CAAC,EAAIN,EAAI,CAAI,CACjD,CACD,CAKAR,EAAO,QAAUO,ICzCjB,IAAIQ,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnan", "pow", "ln", "NINF", "PI", "logpdf", "x", "mu", "sigma", "s2", "A", "B", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "isnan", "pow", "ln", "NINF", "PI", "factory", "mu", "sigma", "s2", "A", "B", "logpdf", "x", "setReadOnly", "main", "factory"]
}
